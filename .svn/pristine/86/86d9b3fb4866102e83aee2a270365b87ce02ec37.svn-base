use [TVProgBase]
go

if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spInsChannel'))
drop procedure spInsChannel;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUdtChannelInfo'))
drop procedure spUdtChannelInfo;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUdtChannelImageByID'))
drop procedure spUdtChannelImageByID;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUdtChannelImage'))
drop procedure spUdtChannelImage;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'fnStrToDateTimeOffset'))
drop function fnStrToDateTimeOffset;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'fnGetCIDByInternalID'))
drop function fnGetCIDByInternalID;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUpdateXmlChansAndProgs'))
drop procedure spUpdateXmlChansAndProgs;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spGetUserChannels'))
drop procedure spGetUserChannels;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spInsUserChannel'))
drop procedure spInsUserChannel;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUdtUserChannelInfo'))
drop procedure spUdtUserChannelInfo;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUdtUserChannelImageByID'))
drop procedure spUdtUserChannelImageByID;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUdtUserChannelImage'))
drop procedure spUdtUserChannelImage;
go
-- Вставка канала с картинкой
create procedure spInsChannel (
	@TVProgProviderID int,
	@InternalID int, 
	@TitleChannel nvarchar(300),
	@IconWebSrc nvarchar(550),
	@ChannelIconName nvarchar(256),
	@ContentType nvarchar(256),
	@ContentCoding nvarchar(256),
	@ChannelIcon varbinary(7168),
	@IsSystem bit,
	@ErrCode int out)
as 
declare @cntChannels int;
declare @IconID bigint;
declare @LengthIcon int;
begin
	/* ErrCode = 73 - произошла ошибка вставки канала
	   ErrCode = 75 - произошла ошибка обновления пиктограммы канала
	   ErrCode = 79 - слишком большая длина файла  */
	set @ErrCode = 0;
	select @cntChannels = COUNT(*)
	from dbo.Channels
	where TVProgProviderID = @TVProgProviderID and TitleChannel = @TitleChannel;
	if (@cntChannels = 0)
	begin
	    begin try
			set @LengthIcon = LEN(@ChannelIcon); 
	        if (@LengthIcon > 7168) 
	        begin 
				set @ErrCode = 79;
				return;
			end;
	        insert into dbo.MediaPic (FileName, ContentType, ContentCoding, Content, Length, IsSystem)
			values (@ChannelIconName, @ContentType, @ContentCoding, @ChannelIcon, @LengthIcon, @IsSystem);
	    end try
	    begin catch
			set @ErrCode = 75;
	    end catch
	    set @IconID = SCOPE_IDENTITY();
		begin try
		    insert into dbo.Channels (TVProgProviderID, InternalID, IconID, TitleChannel, IconWebSrc)
			values (@TVProgProviderID, @InternalID, @IconID, @TitleChannel, @IconWebSrc);
		end try
		begin catch
			set @ErrCode = 73;
		end catch
	end	
end
go

-- Обновение скалярных данных канала
create procedure spUdtChannelInfo (
	@CID int,
	@TVProgProviderID int,
	@InternalID int,
	@TitleChannel nvarchar(300),
	@ErrCode int out)
as
begin
	/* ErrCode = 74 - произошла ошибка обновления скалярных данных канала */
	set @ErrCode = 0;
	begin try
		update dbo.Channels set TVProgProviderID = @TVProgProviderID,
		InternalID = @InternalID,
		TitleChannel = @TitleChannel
		where ChannelID = @CID;
	end try
	begin catch
		set @ErrCode = 74;
	end catch	
end		
go

-- Обновление пиктограммы канала
create procedure spUdtChannelImageByID(@CID int, @IconID bigint)
as
declare @ErrCode int;
begin
	/* ErrCode = 76 - произошла ошибка обновления пиктограммы канала*/
	set @ErrCode = 0;
	begin try
		update dbo.Channels set IconID = @IconID
		where ChannelID = @CID;
	end try
	begin catch 
		set @ErrCode = 76;
	end catch 
end
go

-- Обновление/вставка пиктограммы канала
create procedure spUdtChannelImage(
	@CID int,
	@IconWebSrc nvarchar(550),
	@ChannelIconName nvarchar(256),
	@ContentType nvarchar(256),
	@ContentCoding nvarchar(256),
	@ChannelIcon varbinary(7168),
	@IsSystem bit,
	@ErrCode int out
)
as
declare @cntIcon int;
declare @LengthIcon int;
declare @IconID bigint;
begin
	/* ErrCode = 75 - произошла ошибка вставки/обновления пиктограммы
		ErrCode = 79 - слишком большая длина файла */
	set @ErrCode = 0;	
	set @LengthIcon = LEN(@ChannelIcon);
    if (@LengthIcon > 7168)
    begin
		set @ErrCode = 79;
		return; 
    end;		
	
	select @cntIcon = COUNT(*) 
	from dbo.MediaPic
	where FileName Like @ChannelIconName;
	begin try
	if (@cntIcon = 0)
	begin 
		insert into dbo.MediaPic (FileName, ContentType, ContentCoding, Content, Length, IsSystem)
		values (@ChannelIconName, @ContentType, @ContentCoding, @ChannelIcon, @LengthIcon, @IsSystem);
	    set @IconID = SCOPE_IDENTITY();
	    exec dbo.spUdtChannelImageByID @CID, @IconID;
	end
	else 
	begin
	    update dbo.MediaPic set ContentType = @ContentType, 
			ContentCoding = @ContentCoding, 
			Content = @ChannelIcon, 
			Length = @LengthIcon,
			IsSystem = @IsSystem  
		where FileName Like @ChannelIconName	
	end	
	end try
	begin catch
		set @ErrCode = 75;
	end catch
end;
go

-- Функция получения зонированного времени из строки
create function fnStrToDateTimeOffset(@dateStr nvarchar(20))
returns datetimeoffset
as
begin 
  return CONVERT(datetimeoffset, STUFF(STUFF(STUFF(STUFF(@dateStr, 9, 0, ' '),12,0,':'), 15, 0, ':'), 22, 0, ':'), 112);
end
go

-- Функция получения ChannelID по InternalID
create function fnGetCIDByInternalID(@TVProgProviderID int,@InternalID int)
returns int
as
begin 
	declare @ChannelID int;
	set @ChannelID = -1;
	select @ChannelID = chans.ChannelID 
	from dbo.Channels chans
	where TVProgProviderID = @TVProgProviderID and InternalID = @InternalID;
	return @ChannelID;
end;
go

-- Обновление телеканалов и телепрограммы	
create procedure spUpdateXmlChansAndProgs(@WRID int, @ChanAndProg xml)
as 
declare 
@intPointer int,
@TsUpdateStart datetimeoffset,
@ElapsedTimeSec int,
@MinProgDate datetimeoffset,
@MaxProgDate datetimeoffset,
@QtyChannels int,
@QtyProgrammes int,
@QtyNewChannels int,
@QtyNewProgrammes int,
@TVProgProviderID int,
@TID int,
@IsSuccess bit,
@ErrMessage nvarchar(4000)
begin
  select @IsSuccess = 0, 
  @ErrMessage = '', 
  @MinProgDate = SYSDATETIMEOFFSET(),
  @MaxProgDate = SYSDATETIMEOFFSET(),
  @QtyChannels = 0,
  @QtyProgrammes = 0,
  @QtyNewChannels = 0,
  @QtyNewProgrammes = 0;
  -- Начинаем...
  set @TsUpdateStart = SysDateTimeOffset();	
  begin try
  exec sp_xml_preparedocument @intPointer output, @ChanAndProg;
  
  -- Выборка каналов
  select id, displayname, icon into #TempChannels  
  from OPENXML(@intPointer, '/tv/channel',2) 
  with (
	id int '@id', 
	displayname nvarchar(50) 'display-name', 
	icon nvarchar(100) 'icon/@src' 
		);
		
  -- Выборка программ			
  select chanid, 
  dbo.fnStrToDateTimeOffset(TsStart) as TsStart,
  dbo.fnStrToDateTimeOffset(TsStop) as TsStop, 
  Title, 
  Descrip,
  Category into #TempProgrammes
  from OPENXML(@intPointer, '/tv/programme',2) 
  with (
	chanid int '@channel', 
	TsStart nvarchar(20) '@start', 
	TsStop nvarchar(20) '@stop', 
	Title nvarchar(300) 'title',
	Descrip nvarchar(1000) 'desc', 
	Category nvarchar(150) 'category'
		);
  exec sp_xml_removedocument @intPointer;
  -- Вычисление предварительной статистики:
  select @QtyChannels = COUNT(*) from #TempChannels;
  select @MinProgDate = MIN(TsStart) from #TempProgrammes;
  select @MaxProgDate = MAX(TsStop) from #TempProgrammes;
  select @QtyProgrammes = COUNT(*) from #TempProgrammes;
  
  -- Получение провайдера телепрограммы и её типа
  select @TVProgProviderID = tp.TVProgProviderID, @TID = tp.TypeProgID 
  from dbo.WebResources wr
  join dbo.TypeProg tp
  on wr.TPID = tp.TypeProgID;
  
  -- Вставка только новых каналов
  insert into dbo.Channels (TVProgProviderID, InternalID, TitleChannel, IconWebSrc)
  select @TVProgProviderID, impCh.id, impCh.displayname, impCh.icon 
  from #TempChannels impCh
  left join dbo.Channels chans
  on impCh.id = chans.InternalID
  where chans.ChannelID IS NULL; 
  -- Извлечение заключительной статистики по каналам
  set @QtyNewChannels = @@ROWCOUNT;
    
  drop table #TempChannels;
  
  -- Вставка только новых телепрограмм
  insert into dbo.Programmes (
	TID, 
	CID, 
	InternalChanID, 
	TsStart, 
	TsStop, 
	TsStartMO, 
	TsStopMO,
	Title,
	Descr,
	Category)
  select @TID, 
  dbo.fnGetCIDByInternalID(@TVProgProviderID, impProg.chanid), 
  impProg.chanid, 
  impProg.TsStart,
  impProg.TsStop,
  SWITCHOFFSET(impProg.TsStart, '+04:00'),
  SWITCHOFFSET(impProg.TsStop, '+04:00'),
  impProg.Title,
  impProg.Descrip,
  impProg.Category
  from #TempProgrammes impProg
  left join dbo.Programmes prog
  on impProg.chanid = prog.InternalChanID and impProg.TsStart = prog.TsStart and impProg.TsStop = prog.TsStop
  where prog.ProgrammesID IS NULL;
  
  -- Извлечение заключительной статистики по программам
  set @QtyNewProgrammes = @@ROWCOUNT;
    
  drop table #TempProgrammes;
  
  -- Закончили...
  set @ElapsedTimeSec = DATEDIFF(ss, @TsUpdateStart, SysDateTimeOffset());
  set @IsSuccess = 1;
  end try
  begin catch
	declare @ErrorNo int,
	        @Severity tinyint,
	        @State smallint,
	        @LineNo int,
	        @Message nvarchar(4000)
	select  @ErrorNo = ERROR_NUMBER(),
	        @Severity = ERROR_SEVERITY(),
	        @State = ERROR_STATE(),
	        @LineNo = ERROR_LINE(),
	        @Message = ERROR_MESSAGE()       
	select 
	@ErrMessage = N'ErrorNo=' + @ErrorNo + ', Severity=' + @Severity + 
	', State=' + @State + ', Line='+ @LineNo + ', Msg='''+ @Message + '''.',
	@IsSuccess = 0,
	@ElapsedTimeSec = DATEDIFF(ss, @TsUpdateStart, SysDateTimeOffset());
  end catch 
  
  -- фиксируем в лог:
  insert dbo.UpdateProgLog(
	WRID, 
	TsUpdateStart, 
	UdtElapsedSec, 
	MinProgDate, 
	MaxProgDate, 
	QtyChans, 
	QtyProgrammes,  
	QtyNewChans,
	QtyNewProgrammes,
	IsSuccess,
	ErrorMessage)
  values (
    @WRID, 
    @TsUpdateStart, 
    @ElapsedTimeSec, 
    @MinProgDate,
    @MaxProgDate,
    @QtyChannels,
    @QtyProgrammes,
    @QtyNewChannels,
    @QtyNewProgrammes,
    @IsSuccess,
    @ErrMessage);
end    
go

-- Получение списка каналов пользователей
create procedure spGetUserChannels (@UID bigint, @TVProgProviderID int, @IsCaching bit)
as 
declare @orderNum int;
declare @ErrCode int;
begin
    /* ErrCode = 80 Ошибка вставки пользовательских каналов
       ErrCode = 81 Ошибка получения пользовательских каналов
    */
	set @ErrCode = 0;
	select @orderNum = ISNULL(MAX(OrderCol), 0)
	from dbo.UserChannels 
	where UID = @UID;
	begin try
		insert into dbo.UserChannels (UID, CID, IconID, DisplayName, OrderCol)
		select @UID, ch.ChannelID, ch.IconID, ch.TitleChannel, (@orderNum + ROW_NUMBER() OVER (order by ch.ChannelID))
		from  dbo.Channels ch
		where ch.TVProgProviderID = @TVProgProviderID and ch.ChannelID not in (
				select CID 
				from dbo.UserChannels uch
				where uch.UID = @UID and uch.CID = ch.ChannelID)
    end try
    begin catch
		set @ErrCode = 80;
    end catch
    			
    begin try			 
		if (@IsCaching = 0)		
		begin
			select uch.UserChannelID, uch.CID, uch.IconID, mp.Content, uch.DisplayName, uch.OrderCol
			from dbo.UserChannels uch
			join dbo.MediaPic mp
			on uch.IconID = mp.IconID	
		end
		else
		begin
			select uch.UserChannelID, uch.CID, uch.IconID, uch.DisplayName, uch.OrderCol
			from dbo.UserChannels uch;
		end
	end try
	begin catch
		set @ErrCode = 81;
	end catch
end
go

-- Вставка пользовательского канала с картинкой
create procedure spInsUserChannel (
	@UID bigint, 
	@CID int,
	@DisplayName nvarchar(300),
	@IconWebSrc nvarchar(550),
	@ChannelIconName nvarchar(256),
	@ContentType nvarchar(256),
	@ContentCoding nvarchar(256),
	@ChannelIcon varbinary(7168),
	@ErrCode int out)
as 
declare @cntUserChannels int;
declare @IconID bigint;
declare @LengthIcon int;
declare @orderNum int;
begin
	/* 
	   ErrCOde = 75 - ошибка вставки/обновления пиктограммы
	   ErrCode = 79 - слишком большая длина файла
	   ErrCode = 80 - произошла ошибка вставки пользовательского канала
	   */
	set @ErrCode = 0;
	select @orderNum = ISNULL(MAX(OrderCol), 0)
	from dbo.UserChannels 
	where UID = @UID;
	select @cntUserChannels = COUNT(*)
	from dbo.UserChannels
	where DisplayName = @DisplayName and UID = @UID and CID = @CID;
	if (@cntUserChannels = 0)
	begin
	    begin try
			set @LengthIcon = LEN(@ChannelIcon); 
	        if (@LengthIcon > 7168) 
	        begin 
				set @ErrCode = 79;
				return;
			end;
	        insert into dbo.MediaPic (FileName, ContentType, ContentCoding, Content, Length, IsSystem)
			values (@ChannelIconName, @ContentType, @ContentCoding, @ChannelIcon, @LengthIcon, 0);
	    end try
	    begin catch
			set @ErrCode = 75;
	    end catch
	    set @IconID = SCOPE_IDENTITY();
		begin try
		    insert into dbo.UserChannels (UID, CID, IconID, DisplayName, OrderCol)
			values (@UID, @CID, @IconID, @DisplayName, @orderNum + 1);
		end try
		begin catch
			set @ErrCode = 80;
		end catch
	end	
end
go

-- Обновление скалярных данных пользовательского канала
create procedure spUdtUserChannelInfo (
	@UserChannelID int,
	@DisplayName nvarchar(300),
	@OrderCol int,
	@ErrCode int out)
as
begin
	/* ErrCode = 82 - произошла ошибка обновления скалярных данных канала */
	set @ErrCode = 0;
	begin try
		update dbo.UserChannels set DisplayName = @DisplayName,
		OrderCol = @OrderCol
		where UserChannelID = @UserChannelID;
	end try
	begin catch
		set @ErrCode = 82;
	end catch	
end		
go

-- Обновление пиктограммы пользовательского канала
create procedure spUdtUserChannelImageByID(@UserChannelID int, @IconID bigint)
as
declare @ErrCode int;
begin
	/* ErrCode = 83 - произошла ошибка обновления кастомной пиктограммы пользовательского канала*/
	set @ErrCode = 0;
	begin try
		update dbo.UserChannels set IconID = @IconID
		where UserChannelID = @UserChannelID;
	end try
	begin catch 
		set @ErrCode = 83;
	end catch 
end
go

-- Обновление/вставка пиктограммы пользовательского канала
create procedure spUdtUserChannelImage(
	@UserChannelID int,
	@IconWebSrc nvarchar(550),
	@ChannelIconName nvarchar(256),
	@ContentType nvarchar(256),
	@ContentCoding nvarchar(256),
	@ChannelIcon varbinary(7168),
	@IsSystem bit,
	@ErrCode int out
)
as
declare @cntIcon int;
declare @LengthIcon int;
declare @IconID bigint;
begin
	/* ErrCode = 75 - произошла ошибка вставки/обновления пиктограммы
		ErrCode = 79 - слишком большая длина файла */
	set @ErrCode = 0;	
	set @LengthIcon = LEN(@ChannelIcon);
    if (@LengthIcon > 7168)
    begin
		set @ErrCode = 79;
		return; 
    end;		
	
	select @cntIcon = COUNT(*) 
	from dbo.MediaPic
	where FileName Like @ChannelIconName;
	begin try
	if (@cntIcon = 0)
	begin 
		insert into dbo.MediaPic (FileName, ContentType, ContentCoding, Content, Length, IsSystem)
		values (@ChannelIconName, @ContentType, @ContentCoding, @ChannelIcon, @LengthIcon, @IsSystem);
	    set @IconID = SCOPE_IDENTITY();
	    exec dbo.spUdtUserChannelImageByID @UserChannelID, @IconID;
	end
	else 
	begin
	    update dbo.MediaPic set ContentType = @ContentType, 
			ContentCoding = @ContentCoding, 
			Content = @ChannelIcon, 
			Length = @LengthIcon,
			IsSystem = @IsSystem  
		where FileName Like @ChannelIconName	
	end	
	end try
	begin catch
		set @ErrCode = 75;
	end catch
end;
go