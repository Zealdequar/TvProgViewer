use TVProgBase;
GO

if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'fnIsUserNameExists'))
drop function fnIsUserNameExists;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'fnIsEmailExists'))
drop function fnIsEmailExists;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUserStart'))
drop procedure spUserStart;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spGetHashesByUserName'))
drop procedure spGetHashesByUserName;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'fnUserIsBlock'))
drop function fnUserIsBlock;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spChangeUserName'))
drop procedure spChangeUserName;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spChangePass'))
drop procedure spChangePass;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spChangeContacts'))
drop procedure spChangeContacts;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'fnGetUserIDByUserName'))
drop function fnGetUserIDByUserName;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spBlockUser'))
drop procedure spBlockUser;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spBlockUserOwn'))
drop procedure spBlockUserOwn;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spBlockUserToDate'))
drop procedure spBlockUserToDate;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spSystemUserUnblock'))
drop procedure spSystemUserUnblock;
if (exists(select * from INFORMATION_SCHEMA.ROUTINES where SPECIFIC_SCHEMA = N'dbo' and SPECIFIC_NAME = N'spUserOwnUnblock'))
drop procedure spUserOwnUnblock;
GO

-- ѕроверка пользовательского имени на совпадение в системе
create function fnIsUserNameExists (@UserName nvarchar(70))
returns bit
as 
begin
	if (exists(select 1	
	from dbo.SystemUsers su
	where su.UserName Like @UserName))
		return 1;
	else
		return 0;
	return 0;
end
go

-- ѕроверка на совпадение такого же email в системе
create function fnIsEmailExists(@Email nvarchar(300))
returns bit
as
begin
	if (exists(select 1
	from dbo.SystemUsers su
	where su.Email Like @Email))
		return 1;
	else 
	return 0;
	return 0;		
end;
go

-- ѕроцедура регистрации нового пользовател€ в системе 
create procedure spUserStart (
@UserName nvarchar(70), 
@PassHash nvarchar(100),
@PassExtend nvarchar(100),
@LastName nvarchar(150),
@FirstName nvarchar(150),
@MiddleName nvarchar(150),
@BirthDate datetime,
@Gender bit,
@Email nvarchar(300),
@MobPhoneNumber nvarchar(25),
@OtherPhoneNumber1 nvarchar(25),
@OtherPhoneNumber2 nvarchar(25),
@Address nvarchar(1000),
@GmtZone nvarchar(10),
@ErrCode int out
)
as 
declare 

@cntEmail int
begin
/*ErrCodes: 2 - “акое им€ пользовател€ уже существует. ”кажите другое им€ пользовател€.;
			3 - ѕользователь с таким e-mail уже зарегистрирован в системе. ”кажите другой e-mail. 
			4 Ч ѕроизошла ошибка при регистрации в системе. ѕопробуйте совершить регистрацию позднее. */	
	set @ErrCode = 0;			
	if (dbo.fnIsUserNameExists(@UserName) = 1)
	begin
		set @ErrCode = 2;
		return;
	end;	
	
	if (dbo.fnIsEmailExists(@Email) = 1)
	begin
		set @ErrCode = 3;
		return;
	end;
	
	begin try
	insert into dbo.SystemUsers (
	UserName, 
	PassHash, 
	PassExtend, 
	LastName, 
	FirstName, 
	MiddleName, 
	BirthDate,
	Gender,
	Email,
	MobPhoneNumber,
	OtherPhoneNumber1,
	OtherPhoneNumber2,
	Address,
	GmtZone,
	Status)
	values
	(
	@UserName,
	@PassHash,
	@PassExtend,
	@LastName,
	@FirstName,
	@MiddleName,
	@BirthDate,
	@Gender,
	@Email,
	@MobPhoneNumber,
	@OtherPhoneNumber1,
	@OtherPhoneNumber2,
	@Address,
	@GmtZone,
	3
	);
	end try
	begin catch
		select @ErrCode = 4;
	end catch
end;
GO

-- ѕолучение хешей дл€ сверки
create procedure spGetHashesByUserName (@UserName nvarchar(70))
as
begin
	select su.PassHash, su.PassExtend 
	from dbo.SystemUsers su
	where su.UserName Like @UserName;
end
GO

-- ѕользователь заблокирован?
create function fnUserIsBlock (@UserName nvarchar(70))
returns bit
as
begin 
declare @sts int;
   select @sts = su.status 
   from dbo.SystemUsers su
   where su.UserName = @UserName;
   
   if (@sts = 6 or (not exists (select 1 
							   from dbo.SystemUsers su
							   where su.DateBegin < GetDate() and GetDate() > su.DateEnd)))
	return 1;
   return 0;
end
go

-- »зменение логина
create procedure spChangeUserName (@OldUserName nvarchar(70), @NewUserName nvarchar(70), @ErrCode int out)
as 
begin
    /* ErrCode: 1 - веденный логин не отличаетс€ от предшествующего,
				2 - введенный логин уже есть в системе, выберите другой логин
				3 - пользователь заблокирован и ему неположено мен€ть логин
				4 - друга€ ошибка, св€занна€ при обновлении записи */
	if (@OldUserName = @NewUserName)
	begin 
	   set @ErrCode = 1;
	   return;
	end
	
	if (dbo.fnIsUserNameExists(@NewUserName) = 1)
	begin
		set @ErrCode = 2;
		return;
	end;
	
	if (dbo.fnUserIsBlock(@OldUserName) = 1)
	begin 
		set @ErrCode = 3;
		return;
	end;
	begin try
		update dbo.SystemUsers set UserName = @NewUserName
		where UserName Like @OldUserName;
	end try
	begin catch
		set @ErrCode = 4;
		return;
	end catch
end
go

-- »зменение парол€ 
create procedure spChangePass(
@UserName nvarchar(70), 
@NewPassExtend nvarchar(100), 
@NewPassHash nvarchar(100),
@ErrCode int out)
as 
begin
	/*ErrCodes: 2 - введенный логин уже есть в системе,
				3 - пользователь заблокирован и ему неположено мен€ть пароль
				4 - друга€ ошибка, св€занна€ при обновлении записи */
	if (dbo.fnIsUserNameExists(@UserName) = 1)
	begin
		set @ErrCode = 2;
		return;
	end;
	
	if (dbo.fnUserIsBlock(@UserName) = 1)
	begin 
		set @ErrCode = 3;
		return;
	end;
	
	begin try
		update dbo.SystemUsers set PassExtend = @NewPassExtend,
								   PassHash = @NewPassHash
		where UserName Like @UserName;
	end try
	begin catch
		set @ErrCode = 4;
		return;
	end catch
end;
go

-- ѕолучение UserID по UserNanme
create function fnGetUserIDByUserName(@UserName nvarchar(70))
returns int
as
begin
	declare @UserID int;
	select @UserID = su.UserID 
	from dbo.SystemUsers su
	where su.UserName Like @UserName;
	return @UserID;
end;
go

-- »зменение контактных данных
create procedure spChangeContacts(
@UserName nvarchar(70), 
@LastName nvarchar(150),
@FirstName nvarchar(150),
@MiddleName nvarchar(150),
@BirthDate datetime,
@Gender bit,
@Email nvarchar(300),
@MobPhoneNumber nvarchar(25),
@OtherPhoneNumber1 nvarchar(25),
@OtherPhoneNumber2 nvarchar(25),
@Address nvarchar(1000),
@GmtZone nvarchar(10),
@ErrCode int out)
as
begin
	/*ErrCodes: 2 - введенный логин уже есть в системе,
				3 - указанный почтовый адрес есть у другого пользовател€,
				4 - пользователь заблокирован и ему неположено мен€ть контактные данные
				5 - друга€ ошибка, св€занна€ при обновлении записи */
	if (dbo.fnIsUserNameExists(@UserName) = 1)
	begin
		set @ErrCode = 2;
		return;
	end;
	
	if (exists(select * 
			  from dbo.SystemUsers su
			  where su.UserName <> @UserName and su.Email Like @Email))
	begin 
		set @ErrCode = 4;
		return;
	end;
		
	if (dbo.fnUserIsBlock(@UserName) = 1)
	begin 
		set @ErrCode = 4;
		return;
	end;
	
	begin try
		update dbo.SystemUsers set 
		LastName = @LastName,
		FirstName = @FirstName,
		MiddleName = @MiddleName,
		BirthDate = @BirthDate,
		Gender = @Gender,
		Email = @Email,
		MobPhoneNumber = @MobPhoneNumber,
		OtherPhoneNumber1 = @OtherPhoneNumber1,
		OtherPhoneNumber2 = @OtherPhoneNumber2,
		Address = @Address,
		GmtZone = @GmtZone
		where UserName = @UserName;
	end try
	begin catch
		set @ErrCode = 5;
		return;
	end catch
end;
go

-- Ѕлокирование пользовател€ (изменение статуса)
create procedure spBlockUser (@UserName nvarchar(70))
as 
begin
	update dbo.SystemUsers set status = 6
	where UserName = @UserName;
end;
go

-- —амоличное блокирование пользователем
create procedure spBlockUserOwn (@UserName nvarchar(70))
as 
begin
	update dbo.SystemUsers set DateBegin = '2900-01-01', DateEnd = '0001-01-01'
	where UserName = @UserName;
end;
go

-- Ѕлокирование пользоател€ до определенной даты
create procedure spBlockUserToDate(@UserName nvarchar(70), @EndDate datetime)
as
begin
	update dbo.SystemUsers set DateEnd = @EndDate
	where UserName = @UserName;
end
go

-- —истемное разблокирование пользовател€
create procedure spSystemUserUnblock(@UserName nvarchar(70))
as
begin 
	update dbo.SystemUsers set DateBegin = '0001-01-01', DateEnd = '2900-01-01', status = 3
	where UserName = @UserName;
end
go

-- —амоличное разблокирование пользователем
create procedure spUserOwnUnblock(@UserName nvarchar(70))
as
begin 
	update dbo.SystemUsers set DateBegin = '0001-01-01', DateEnd = '2900-01-01'
	where UserName = @UserName;
end;
go