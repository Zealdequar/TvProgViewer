//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TVProgViewer.WebUI.MainServiceReferences {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.TypeProg", Namespace="http://schemas.datacontract.org/2004/07/TVProgViewer.Common")]
    public enum EnumsTypeProg : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XMLTV = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InterTV = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServiceReferences.IMainService")]
    public interface IMainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddUser", ReplyAction="http://tempuri.org/IMainService/AddUserResponse")]
        int AddUser(string userName, string passHash, string passExtend, string lastName, string firstName, string middleName, System.DateTime birthDate, System.Nullable<bool> gender, string email, string mobPhone, string otherPhone1, string otherPhone2, string address, string gmtZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddUser", ReplyAction="http://tempuri.org/IMainService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(string userName, string passHash, string passExtend, string lastName, string firstName, string middleName, System.DateTime birthDate, System.Nullable<bool> gender, string email, string mobPhone, string otherPhone1, string otherPhone2, string address, string gmtZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetHashes", ReplyAction="http://tempuri.org/IMainService/GetHashesResponse")]
        TVProgViewer.BusinessLogic.Users.SecureData GetHashes(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetHashes", ReplyAction="http://tempuri.org/IMainService/GetHashesResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.Users.SecureData> GetHashesAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUser", ReplyAction="http://tempuri.org/IMainService/GetUserResponse")]
        TVProgViewer.WebUI.MainServiceReferences.GetUserResponse GetUser(TVProgViewer.WebUI.MainServiceReferences.GetUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUser", ReplyAction="http://tempuri.org/IMainService/GetUserResponse")]
        System.Threading.Tasks.Task<TVProgViewer.WebUI.MainServiceReferences.GetUserResponse> GetUserAsync(TVProgViewer.WebUI.MainServiceReferences.GetUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetProviderTypeList", ReplyAction="http://tempuri.org/IMainService/GetProviderTypeListResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.ProviderType[] GetProviderTypeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetProviderTypeList", ReplyAction="http://tempuri.org/IMainService/GetProviderTypeListResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.ProviderType[]> GetProviderTypeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemChannelList", ReplyAction="http://tempuri.org/IMainService/GetSystemChannelListResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[] GetSystemChannelList(int TVProgProviderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemChannelList", ReplyAction="http://tempuri.org/IMainService/GetSystemChannelListResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[]> GetSystemChannelListAsync(int TVProgProviderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserChannelList", ReplyAction="http://tempuri.org/IMainService/GetUserChannelListResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.UserChannel[] GetUserChannelList(long uid, int typeProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserChannelList", ReplyAction="http://tempuri.org/IMainService/GetUserChannelListResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.UserChannel[]> GetUserChannelListAsync(long uid, int typeProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserInSystemChannels", ReplyAction="http://tempuri.org/IMainService/GetUserInSystemChannelsResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[] GetUserInSystemChannels(long uid, int progProviderID, int typeProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserInSystemChannels", ReplyAction="http://tempuri.org/IMainService/GetUserInSystemChannelsResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[]> GetUserInSystemChannelsAsync(long uid, int progProviderID, int typeProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemProgrammeList", ReplyAction="http://tempuri.org/IMainService/GetSystemProgrammeListResponse")]
        System.Collections.Generic.KeyValuePair<int, TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetSystemProgrammeList(int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category, string sidx, string sord, int page, int rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemProgrammeList", ReplyAction="http://tempuri.org/IMainService/GetSystemProgrammeListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]>> GetSystemProgrammeListAsync(int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category, string sidx, string sord, int page, int rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemProgrammePeriod", ReplyAction="http://tempuri.org/IMainService/GetSystemProgrammePeriodResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.ProgPeriod GetSystemProgrammePeriod(int typeProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemProgrammePeriod", ReplyAction="http://tempuri.org/IMainService/GetSystemProgrammePeriodResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.ProgPeriod> GetSystemProgrammePeriodAsync(int typeProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemProgrammeDayList", ReplyAction="http://tempuri.org/IMainService/GetSystemProgrammeDayListResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] GetSystemProgrammeDayList(int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetSystemProgrammeDayList", ReplyAction="http://tempuri.org/IMainService/GetSystemProgrammeDayListResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetSystemProgrammeDayListAsync(int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/InsertUserChannel", ReplyAction="http://tempuri.org/IMainService/InsertUserChannelResponse")]
        void InsertUserChannel(int userChannelID, long uid, int tvProgProviderID, int cid, string displayName, int orderCol);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/InsertUserChannel", ReplyAction="http://tempuri.org/IMainService/InsertUserChannelResponse")]
        System.Threading.Tasks.Task InsertUserChannelAsync(int userChannelID, long uid, int tvProgProviderID, int cid, string displayName, int orderCol);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteUserChannel", ReplyAction="http://tempuri.org/IMainService/DeleteUserChannelResponse")]
        void DeleteUserChannel(long uid, int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteUserChannel", ReplyAction="http://tempuri.org/IMainService/DeleteUserChannelResponse")]
        System.Threading.Tasks.Task DeleteUserChannelAsync(long uid, int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserProgrammeList", ReplyAction="http://tempuri.org/IMainService/GetUserProgrammeListResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] GetUserProgrammeList(long uid, int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserProgrammeList", ReplyAction="http://tempuri.org/IMainService/GetUserProgrammeListResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetUserProgrammeListAsync(long uid, int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserProgrammeDayList", ReplyAction="http://tempuri.org/IMainService/GetUserProgrammeDayListResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] GetUserProgrammeDayList(long uid, int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetUserProgrammeDayList", ReplyAction="http://tempuri.org/IMainService/GetUserProgrammeDayListResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetUserProgrammeDayListAsync(long uid, int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetCategories", ReplyAction="http://tempuri.org/IMainService/GetCategoriesResponse")]
        string[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetCategories", ReplyAction="http://tempuri.org/IMainService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<string[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SearchProgramme", ReplyAction="http://tempuri.org/IMainService/SearchProgrammeResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] SearchProgramme(int typeProgID, string findTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SearchProgramme", ReplyAction="http://tempuri.org/IMainService/SearchProgrammeResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> SearchProgrammeAsync(int typeProgID, string findTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SearchUserProgramme", ReplyAction="http://tempuri.org/IMainService/SearchUserProgrammeResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] SearchUserProgramme(long uid, int typeProgID, string findTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SearchUserProgramme", ReplyAction="http://tempuri.org/IMainService/SearchUserProgrammeResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> SearchUserProgrammeAsync(long uid, int typeProgID, string findTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateCatalog", ReplyAction="http://tempuri.org/IMainService/UpdateCatalogResponse")]
        void UpdateCatalog(long uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateCatalog", ReplyAction="http://tempuri.org/IMainService/UpdateCatalogResponse")]
        System.Threading.Tasks.Task UpdateCatalogAsync(long uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ChangeChannelImage", ReplyAction="http://tempuri.org/IMainService/ChangeChannelImageResponse")]
        void ChangeChannelImage(long uid, int userChannelId, string filename, string contentType, int length, int length25, string pathOrig, string path25);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ChangeChannelImage", ReplyAction="http://tempuri.org/IMainService/ChangeChannelImageResponse")]
        System.Threading.Tasks.Task ChangeChannelImageAsync(long uid, int userChannelId, string filename, string contentType, int length, int length25, string pathOrig, string path25);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetGenres", ReplyAction="http://tempuri.org/IMainService/GetGenresResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.Genre[] GetGenres(System.Nullable<long> uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetGenres", ReplyAction="http://tempuri.org/IMainService/GetGenresResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.Genre[]> GetGenresAsync(System.Nullable<long> uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddGenre", ReplyAction="http://tempuri.org/IMainService/AddGenreResponse")]
        long AddGenre(System.Nullable<long> uid, string name, System.Nullable<int> iconId, bool visible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddGenre", ReplyAction="http://tempuri.org/IMainService/AddGenreResponse")]
        System.Threading.Tasks.Task<long> AddGenreAsync(System.Nullable<long> uid, string name, System.Nullable<int> iconId, bool visible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateGenre", ReplyAction="http://tempuri.org/IMainService/UpdateGenreResponse")]
        void UpdateGenre(long genreId, string name, bool visible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateGenre", ReplyAction="http://tempuri.org/IMainService/UpdateGenreResponse")]
        System.Threading.Tasks.Task UpdateGenreAsync(long genreId, string name, bool visible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteGenre", ReplyAction="http://tempuri.org/IMainService/DeleteGenreResponse")]
        void DeleteGenre(long genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteGenre", ReplyAction="http://tempuri.org/IMainService/DeleteGenreResponse")]
        System.Threading.Tasks.Task DeleteGenreAsync(long genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ChangeGenreImage", ReplyAction="http://tempuri.org/IMainService/ChangeGenreImageResponse")]
        void ChangeGenreImage(long uid, long genreId, string filename, string contentType, int length, string pathOrig, string path25);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ChangeGenreImage", ReplyAction="http://tempuri.org/IMainService/ChangeGenreImageResponse")]
        System.Threading.Tasks.Task ChangeGenreImageAsync(long uid, long genreId, string filename, string contentType, int length, string pathOrig, string path25);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetGenreClassificators", ReplyAction="http://tempuri.org/IMainService/GetGenreClassificatorsResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.GenreClassif[] GetGenreClassificators(System.Nullable<long> uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetGenreClassificators", ReplyAction="http://tempuri.org/IMainService/GetGenreClassificatorsResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.GenreClassif[]> GetGenreClassificatorsAsync(System.Nullable<long> uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddGenreClassificator", ReplyAction="http://tempuri.org/IMainService/AddGenreClassificatorResponse")]
        long AddGenreClassificator(long gid, System.Nullable<long> uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddGenreClassificator", ReplyAction="http://tempuri.org/IMainService/AddGenreClassificatorResponse")]
        System.Threading.Tasks.Task<long> AddGenreClassificatorAsync(long gid, System.Nullable<long> uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateGenreClassificator", ReplyAction="http://tempuri.org/IMainService/UpdateGenreClassificatorResponse")]
        void UpdateGenreClassificator(long genreClassificatorId, long gid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateGenreClassificator", ReplyAction="http://tempuri.org/IMainService/UpdateGenreClassificatorResponse")]
        System.Threading.Tasks.Task UpdateGenreClassificatorAsync(long genreClassificatorId, long gid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteGenreClassificator", ReplyAction="http://tempuri.org/IMainService/DeleteGenreClassificatorResponse")]
        void DeleteGenreClassificator(long genreClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteGenreClassificator", ReplyAction="http://tempuri.org/IMainService/DeleteGenreClassificatorResponse")]
        System.Threading.Tasks.Task DeleteGenreClassificatorAsync(long genreClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpGenreClassificateElem", ReplyAction="http://tempuri.org/IMainService/UpGenreClassificateElemResponse")]
        void UpGenreClassificateElem(long genreClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpGenreClassificateElem", ReplyAction="http://tempuri.org/IMainService/UpGenreClassificateElemResponse")]
        System.Threading.Tasks.Task UpGenreClassificateElemAsync(long genreClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DownGenreClassificateElem", ReplyAction="http://tempuri.org/IMainService/DownGenreClassificateElemResponse")]
        void DownGenreClassificateElem(long genreClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DownGenreClassificateElem", ReplyAction="http://tempuri.org/IMainService/DownGenreClassificateElemResponse")]
        System.Threading.Tasks.Task DownGenreClassificateElemAsync(long genreClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetRatings", ReplyAction="http://tempuri.org/IMainService/GetRatingsResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.Rating[] GetRatings(long uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetRatings", ReplyAction="http://tempuri.org/IMainService/GetRatingsResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.Rating[]> GetRatingsAsync(long uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddRating", ReplyAction="http://tempuri.org/IMainService/AddRatingResponse")]
        long AddRating(long uid, string name, System.Nullable<int> iconId, bool visible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddRating", ReplyAction="http://tempuri.org/IMainService/AddRatingResponse")]
        System.Threading.Tasks.Task<long> AddRatingAsync(long uid, string name, System.Nullable<int> iconId, bool visible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateRating", ReplyAction="http://tempuri.org/IMainService/UpdateRatingResponse")]
        void UpdateRating(long ratingId, string name, bool visible, System.Nullable<System.DateTimeOffset> deleteDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateRating", ReplyAction="http://tempuri.org/IMainService/UpdateRatingResponse")]
        System.Threading.Tasks.Task UpdateRatingAsync(long ratingId, string name, bool visible, System.Nullable<System.DateTimeOffset> deleteDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteRating", ReplyAction="http://tempuri.org/IMainService/DeleteRatingResponse")]
        void DeleteRating(long ratingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteRating", ReplyAction="http://tempuri.org/IMainService/DeleteRatingResponse")]
        System.Threading.Tasks.Task DeleteRatingAsync(long ratingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ChangeRatingImage", ReplyAction="http://tempuri.org/IMainService/ChangeRatingImageResponse")]
        void ChangeRatingImage(long uid, long ratingId, string filename, string contentType, int length, string pathOrig, string path25);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/ChangeRatingImage", ReplyAction="http://tempuri.org/IMainService/ChangeRatingImageResponse")]
        System.Threading.Tasks.Task ChangeRatingImageAsync(long uid, long ratingId, string filename, string contentType, int length, string pathOrig, string path25);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetRatingClassificators", ReplyAction="http://tempuri.org/IMainService/GetRatingClassificatorsResponse")]
        TVProgViewer.BusinessLogic.ProgObjs.RatingClassif[] GetRatingClassificators(long uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetRatingClassificators", ReplyAction="http://tempuri.org/IMainService/GetRatingClassificatorsResponse")]
        System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.RatingClassif[]> GetRatingClassificatorsAsync(long uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddRatingClassificator", ReplyAction="http://tempuri.org/IMainService/AddRatingClassificatorResponse")]
        long AddRatingClassificator(long rid, long uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddRatingClassificator", ReplyAction="http://tempuri.org/IMainService/AddRatingClassificatorResponse")]
        System.Threading.Tasks.Task<long> AddRatingClassificatorAsync(long rid, long uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateRatingClassificator", ReplyAction="http://tempuri.org/IMainService/UpdateRatingClassificatorResponse")]
        void UpdateRatingClassificator(long ratingClassificatorId, long rid, string containPhrases, string nonContainPrhases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpdateRatingClassificator", ReplyAction="http://tempuri.org/IMainService/UpdateRatingClassificatorResponse")]
        System.Threading.Tasks.Task UpdateRatingClassificatorAsync(long ratingClassificatorId, long rid, string containPhrases, string nonContainPrhases, System.Nullable<System.DateTime> deleteAfterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteRatingClassificator", ReplyAction="http://tempuri.org/IMainService/DeleteRatingClassificatorResponse")]
        void DeleteRatingClassificator(long ratingClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DeleteRatingClassificator", ReplyAction="http://tempuri.org/IMainService/DeleteRatingClassificatorResponse")]
        System.Threading.Tasks.Task DeleteRatingClassificatorAsync(long ratingClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpRatingClassificateElem", ReplyAction="http://tempuri.org/IMainService/UpRatingClassificateElemResponse")]
        void UpRatingClassificateElem(long ratingClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/UpRatingClassificateElem", ReplyAction="http://tempuri.org/IMainService/UpRatingClassificateElemResponse")]
        System.Threading.Tasks.Task UpRatingClassificateElemAsync(long ratingClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DownRatingClassificateElem", ReplyAction="http://tempuri.org/IMainService/DownRatingClassificateElemResponse")]
        void DownRatingClassificateElem(long ratingClassificatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/DownRatingClassificateElem", ReplyAction="http://tempuri.org/IMainService/DownRatingClassificateElemResponse")]
        System.Threading.Tasks.Task DownRatingClassificateElemAsync(long ratingClassificatorId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long uid;
        
        public GetUserRequest() {
        }
        
        public GetUserRequest(long uid) {
            this.uid = uid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public TVProgViewer.BusinessLogic.Users.User GetUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int errCode;
        
        public GetUserResponse() {
        }
        
        public GetUserResponse(TVProgViewer.BusinessLogic.Users.User GetUserResult, int errCode) {
            this.GetUserResult = GetUserResult;
            this.errCode = errCode;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceChannel : TVProgViewer.WebUI.MainServiceReferences.IMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainServiceClient : System.ServiceModel.ClientBase<TVProgViewer.WebUI.MainServiceReferences.IMainService>, TVProgViewer.WebUI.MainServiceReferences.IMainService {
        
        public MainServiceClient() {
        }
        
        public MainServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MainServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(string userName, string passHash, string passExtend, string lastName, string firstName, string middleName, System.DateTime birthDate, System.Nullable<bool> gender, string email, string mobPhone, string otherPhone1, string otherPhone2, string address, string gmtZone) {
            return base.Channel.AddUser(userName, passHash, passExtend, lastName, firstName, middleName, birthDate, gender, email, mobPhone, otherPhone1, otherPhone2, address, gmtZone);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(string userName, string passHash, string passExtend, string lastName, string firstName, string middleName, System.DateTime birthDate, System.Nullable<bool> gender, string email, string mobPhone, string otherPhone1, string otherPhone2, string address, string gmtZone) {
            return base.Channel.AddUserAsync(userName, passHash, passExtend, lastName, firstName, middleName, birthDate, gender, email, mobPhone, otherPhone1, otherPhone2, address, gmtZone);
        }
        
        public TVProgViewer.BusinessLogic.Users.SecureData GetHashes(string username) {
            return base.Channel.GetHashes(username);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.Users.SecureData> GetHashesAsync(string username) {
            return base.Channel.GetHashesAsync(username);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TVProgViewer.WebUI.MainServiceReferences.GetUserResponse TVProgViewer.WebUI.MainServiceReferences.IMainService.GetUser(TVProgViewer.WebUI.MainServiceReferences.GetUserRequest request) {
            return base.Channel.GetUser(request);
        }
        
        public TVProgViewer.BusinessLogic.Users.User GetUser(long uid, out int errCode) {
            TVProgViewer.WebUI.MainServiceReferences.GetUserRequest inValue = new TVProgViewer.WebUI.MainServiceReferences.GetUserRequest();
            inValue.uid = uid;
            TVProgViewer.WebUI.MainServiceReferences.GetUserResponse retVal = ((TVProgViewer.WebUI.MainServiceReferences.IMainService)(this)).GetUser(inValue);
            errCode = retVal.errCode;
            return retVal.GetUserResult;
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.WebUI.MainServiceReferences.GetUserResponse> GetUserAsync(TVProgViewer.WebUI.MainServiceReferences.GetUserRequest request) {
            return base.Channel.GetUserAsync(request);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.ProviderType[] GetProviderTypeList() {
            return base.Channel.GetProviderTypeList();
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.ProviderType[]> GetProviderTypeListAsync() {
            return base.Channel.GetProviderTypeListAsync();
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[] GetSystemChannelList(int TVProgProviderID) {
            return base.Channel.GetSystemChannelList(TVProgProviderID);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[]> GetSystemChannelListAsync(int TVProgProviderID) {
            return base.Channel.GetSystemChannelListAsync(TVProgProviderID);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.UserChannel[] GetUserChannelList(long uid, int typeProgID) {
            return base.Channel.GetUserChannelList(uid, typeProgID);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.UserChannel[]> GetUserChannelListAsync(long uid, int typeProgID) {
            return base.Channel.GetUserChannelListAsync(uid, typeProgID);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[] GetUserInSystemChannels(long uid, int progProviderID, int typeProgID) {
            return base.Channel.GetUserInSystemChannels(uid, progProviderID, typeProgID);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemChannel[]> GetUserInSystemChannelsAsync(long uid, int progProviderID, int typeProgID) {
            return base.Channel.GetUserInSystemChannelsAsync(uid, progProviderID, typeProgID);
        }
        
        public System.Collections.Generic.KeyValuePair<int, TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetSystemProgrammeList(int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category, string sidx, string sord, int page, int rows) {
            return base.Channel.GetSystemProgrammeList(typeProgID, dateTimeOffset, mode, category, sidx, sord, page, rows);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]>> GetSystemProgrammeListAsync(int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category, string sidx, string sord, int page, int rows) {
            return base.Channel.GetSystemProgrammeListAsync(typeProgID, dateTimeOffset, mode, category, sidx, sord, page, rows);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.ProgPeriod GetSystemProgrammePeriod(int typeProgID) {
            return base.Channel.GetSystemProgrammePeriod(typeProgID);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.ProgPeriod> GetSystemProgrammePeriodAsync(int typeProgID) {
            return base.Channel.GetSystemProgrammePeriodAsync(typeProgID);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] GetSystemProgrammeDayList(int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop) {
            return base.Channel.GetSystemProgrammeDayList(typeProgID, cid, tsStart, tsStop);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetSystemProgrammeDayListAsync(int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop) {
            return base.Channel.GetSystemProgrammeDayListAsync(typeProgID, cid, tsStart, tsStop);
        }
        
        public void InsertUserChannel(int userChannelID, long uid, int tvProgProviderID, int cid, string displayName, int orderCol) {
            base.Channel.InsertUserChannel(userChannelID, uid, tvProgProviderID, cid, displayName, orderCol);
        }
        
        public System.Threading.Tasks.Task InsertUserChannelAsync(int userChannelID, long uid, int tvProgProviderID, int cid, string displayName, int orderCol) {
            return base.Channel.InsertUserChannelAsync(userChannelID, uid, tvProgProviderID, cid, displayName, orderCol);
        }
        
        public void DeleteUserChannel(long uid, int cid) {
            base.Channel.DeleteUserChannel(uid, cid);
        }
        
        public System.Threading.Tasks.Task DeleteUserChannelAsync(long uid, int cid) {
            return base.Channel.DeleteUserChannelAsync(uid, cid);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] GetUserProgrammeList(long uid, int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category) {
            return base.Channel.GetUserProgrammeList(uid, typeProgID, dateTimeOffset, mode, category);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetUserProgrammeListAsync(long uid, int typeProgID, System.DateTimeOffset dateTimeOffset, int mode, string category) {
            return base.Channel.GetUserProgrammeListAsync(uid, typeProgID, dateTimeOffset, mode, category);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] GetUserProgrammeDayList(long uid, int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop, string category) {
            return base.Channel.GetUserProgrammeDayList(uid, typeProgID, cid, tsStart, tsStop, category);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> GetUserProgrammeDayListAsync(long uid, int typeProgID, int cid, System.DateTime tsStart, System.DateTime tsStop, string category) {
            return base.Channel.GetUserProgrammeDayListAsync(uid, typeProgID, cid, tsStart, tsStop, category);
        }
        
        public string[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] SearchProgramme(int typeProgID, string findTitle) {
            return base.Channel.SearchProgramme(typeProgID, findTitle);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> SearchProgrammeAsync(int typeProgID, string findTitle) {
            return base.Channel.SearchProgrammeAsync(typeProgID, findTitle);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[] SearchUserProgramme(long uid, int typeProgID, string findTitle) {
            return base.Channel.SearchUserProgramme(uid, typeProgID, findTitle);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.SystemProgramme[]> SearchUserProgrammeAsync(long uid, int typeProgID, string findTitle) {
            return base.Channel.SearchUserProgrammeAsync(uid, typeProgID, findTitle);
        }
        
        public void UpdateCatalog(long uid) {
            base.Channel.UpdateCatalog(uid);
        }
        
        public System.Threading.Tasks.Task UpdateCatalogAsync(long uid) {
            return base.Channel.UpdateCatalogAsync(uid);
        }
        
        public void ChangeChannelImage(long uid, int userChannelId, string filename, string contentType, int length, int length25, string pathOrig, string path25) {
            base.Channel.ChangeChannelImage(uid, userChannelId, filename, contentType, length, length25, pathOrig, path25);
        }
        
        public System.Threading.Tasks.Task ChangeChannelImageAsync(long uid, int userChannelId, string filename, string contentType, int length, int length25, string pathOrig, string path25) {
            return base.Channel.ChangeChannelImageAsync(uid, userChannelId, filename, contentType, length, length25, pathOrig, path25);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.Genre[] GetGenres(System.Nullable<long> uid) {
            return base.Channel.GetGenres(uid);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.Genre[]> GetGenresAsync(System.Nullable<long> uid) {
            return base.Channel.GetGenresAsync(uid);
        }
        
        public long AddGenre(System.Nullable<long> uid, string name, System.Nullable<int> iconId, bool visible) {
            return base.Channel.AddGenre(uid, name, iconId, visible);
        }
        
        public System.Threading.Tasks.Task<long> AddGenreAsync(System.Nullable<long> uid, string name, System.Nullable<int> iconId, bool visible) {
            return base.Channel.AddGenreAsync(uid, name, iconId, visible);
        }
        
        public void UpdateGenre(long genreId, string name, bool visible) {
            base.Channel.UpdateGenre(genreId, name, visible);
        }
        
        public System.Threading.Tasks.Task UpdateGenreAsync(long genreId, string name, bool visible) {
            return base.Channel.UpdateGenreAsync(genreId, name, visible);
        }
        
        public void DeleteGenre(long genreId) {
            base.Channel.DeleteGenre(genreId);
        }
        
        public System.Threading.Tasks.Task DeleteGenreAsync(long genreId) {
            return base.Channel.DeleteGenreAsync(genreId);
        }
        
        public void ChangeGenreImage(long uid, long genreId, string filename, string contentType, int length, string pathOrig, string path25) {
            base.Channel.ChangeGenreImage(uid, genreId, filename, contentType, length, pathOrig, path25);
        }
        
        public System.Threading.Tasks.Task ChangeGenreImageAsync(long uid, long genreId, string filename, string contentType, int length, string pathOrig, string path25) {
            return base.Channel.ChangeGenreImageAsync(uid, genreId, filename, contentType, length, pathOrig, path25);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.GenreClassif[] GetGenreClassificators(System.Nullable<long> uid) {
            return base.Channel.GetGenreClassificators(uid);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.GenreClassif[]> GetGenreClassificatorsAsync(System.Nullable<long> uid) {
            return base.Channel.GetGenreClassificatorsAsync(uid);
        }
        
        public long AddGenreClassificator(long gid, System.Nullable<long> uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate) {
            return base.Channel.AddGenreClassificator(gid, uid, containPhrases, nonContainPhrases, deleteAfterDate);
        }
        
        public System.Threading.Tasks.Task<long> AddGenreClassificatorAsync(long gid, System.Nullable<long> uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate) {
            return base.Channel.AddGenreClassificatorAsync(gid, uid, containPhrases, nonContainPhrases, deleteAfterDate);
        }
        
        public void UpdateGenreClassificator(long genreClassificatorId, long gid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate) {
            base.Channel.UpdateGenreClassificator(genreClassificatorId, gid, containPhrases, nonContainPhrases, deleteAfterDate);
        }
        
        public System.Threading.Tasks.Task UpdateGenreClassificatorAsync(long genreClassificatorId, long gid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate) {
            return base.Channel.UpdateGenreClassificatorAsync(genreClassificatorId, gid, containPhrases, nonContainPhrases, deleteAfterDate);
        }
        
        public void DeleteGenreClassificator(long genreClassificatorId) {
            base.Channel.DeleteGenreClassificator(genreClassificatorId);
        }
        
        public System.Threading.Tasks.Task DeleteGenreClassificatorAsync(long genreClassificatorId) {
            return base.Channel.DeleteGenreClassificatorAsync(genreClassificatorId);
        }
        
        public void UpGenreClassificateElem(long genreClassificatorId) {
            base.Channel.UpGenreClassificateElem(genreClassificatorId);
        }
        
        public System.Threading.Tasks.Task UpGenreClassificateElemAsync(long genreClassificatorId) {
            return base.Channel.UpGenreClassificateElemAsync(genreClassificatorId);
        }
        
        public void DownGenreClassificateElem(long genreClassificatorId) {
            base.Channel.DownGenreClassificateElem(genreClassificatorId);
        }
        
        public System.Threading.Tasks.Task DownGenreClassificateElemAsync(long genreClassificatorId) {
            return base.Channel.DownGenreClassificateElemAsync(genreClassificatorId);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.Rating[] GetRatings(long uid) {
            return base.Channel.GetRatings(uid);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.Rating[]> GetRatingsAsync(long uid) {
            return base.Channel.GetRatingsAsync(uid);
        }
        
        public long AddRating(long uid, string name, System.Nullable<int> iconId, bool visible) {
            return base.Channel.AddRating(uid, name, iconId, visible);
        }
        
        public System.Threading.Tasks.Task<long> AddRatingAsync(long uid, string name, System.Nullable<int> iconId, bool visible) {
            return base.Channel.AddRatingAsync(uid, name, iconId, visible);
        }
        
        public void UpdateRating(long ratingId, string name, bool visible, System.Nullable<System.DateTimeOffset> deleteDate) {
            base.Channel.UpdateRating(ratingId, name, visible, deleteDate);
        }
        
        public System.Threading.Tasks.Task UpdateRatingAsync(long ratingId, string name, bool visible, System.Nullable<System.DateTimeOffset> deleteDate) {
            return base.Channel.UpdateRatingAsync(ratingId, name, visible, deleteDate);
        }
        
        public void DeleteRating(long ratingId) {
            base.Channel.DeleteRating(ratingId);
        }
        
        public System.Threading.Tasks.Task DeleteRatingAsync(long ratingId) {
            return base.Channel.DeleteRatingAsync(ratingId);
        }
        
        public void ChangeRatingImage(long uid, long ratingId, string filename, string contentType, int length, string pathOrig, string path25) {
            base.Channel.ChangeRatingImage(uid, ratingId, filename, contentType, length, pathOrig, path25);
        }
        
        public System.Threading.Tasks.Task ChangeRatingImageAsync(long uid, long ratingId, string filename, string contentType, int length, string pathOrig, string path25) {
            return base.Channel.ChangeRatingImageAsync(uid, ratingId, filename, contentType, length, pathOrig, path25);
        }
        
        public TVProgViewer.BusinessLogic.ProgObjs.RatingClassif[] GetRatingClassificators(long uid) {
            return base.Channel.GetRatingClassificators(uid);
        }
        
        public System.Threading.Tasks.Task<TVProgViewer.BusinessLogic.ProgObjs.RatingClassif[]> GetRatingClassificatorsAsync(long uid) {
            return base.Channel.GetRatingClassificatorsAsync(uid);
        }
        
        public long AddRatingClassificator(long rid, long uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate) {
            return base.Channel.AddRatingClassificator(rid, uid, containPhrases, nonContainPhrases, deleteAfterDate);
        }
        
        public System.Threading.Tasks.Task<long> AddRatingClassificatorAsync(long rid, long uid, string containPhrases, string nonContainPhrases, System.Nullable<System.DateTime> deleteAfterDate) {
            return base.Channel.AddRatingClassificatorAsync(rid, uid, containPhrases, nonContainPhrases, deleteAfterDate);
        }
        
        public void UpdateRatingClassificator(long ratingClassificatorId, long rid, string containPhrases, string nonContainPrhases, System.Nullable<System.DateTime> deleteAfterDate) {
            base.Channel.UpdateRatingClassificator(ratingClassificatorId, rid, containPhrases, nonContainPrhases, deleteAfterDate);
        }
        
        public System.Threading.Tasks.Task UpdateRatingClassificatorAsync(long ratingClassificatorId, long rid, string containPhrases, string nonContainPrhases, System.Nullable<System.DateTime> deleteAfterDate) {
            return base.Channel.UpdateRatingClassificatorAsync(ratingClassificatorId, rid, containPhrases, nonContainPrhases, deleteAfterDate);
        }
        
        public void DeleteRatingClassificator(long ratingClassificatorId) {
            base.Channel.DeleteRatingClassificator(ratingClassificatorId);
        }
        
        public System.Threading.Tasks.Task DeleteRatingClassificatorAsync(long ratingClassificatorId) {
            return base.Channel.DeleteRatingClassificatorAsync(ratingClassificatorId);
        }
        
        public void UpRatingClassificateElem(long ratingClassificatorId) {
            base.Channel.UpRatingClassificateElem(ratingClassificatorId);
        }
        
        public System.Threading.Tasks.Task UpRatingClassificateElemAsync(long ratingClassificatorId) {
            return base.Channel.UpRatingClassificateElemAsync(ratingClassificatorId);
        }
        
        public void DownRatingClassificateElem(long ratingClassificatorId) {
            base.Channel.DownRatingClassificateElem(ratingClassificatorId);
        }
        
        public System.Threading.Tasks.Task DownRatingClassificateElemAsync(long ratingClassificatorId) {
            return base.Channel.DownRatingClassificateElemAsync(ratingClassificatorId);
        }
    }
}
